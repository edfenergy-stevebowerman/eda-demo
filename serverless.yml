service: eda-demo

frameworkVersion: "3"

package:
  individually: true
  patterns:
    - "!**/**"

provider:
  name: aws
  runtime: python3.9
  region: eu-west-1
  memorySize: 128
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
  tracing:
    lambda: true
  stage: ${env:USER}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: !Join ["/", [!GetAtt SQSInputBucket.Arn, "*"]]
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: !Join ["/", [!GetAtt EventBridgeInputBucket.Arn, "*"]]
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: !Join ["/", [!GetAtt OutputBucket.Arn, "*"]]
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:custom.StateMachine}

custom:
  StateMachine: ${self:service}-${self:provider.stage}
  SQSInputBucket: ${self:service}-sqs-input-${self:provider.stage}

plugins:
  - serverless-step-functions
  - serverless-python-requirements

functions:
  lambdaCollector:
    name: ${self:service}-collector-${self:provider.stage}
    handler: src/collector.handler
    package:
      patterns:
        - src/collector.py

  lambdaProcessor:
    name: ${self:service}-processor-${self:provider.stage}
    handler: src/processor.handler
    package:
      patterns:
        - src/processor.py
    environment:
      API_KEY: ${ssm:/eda-demo/positionstack-key}

  lambdaMerger:
    name: ${self:service}-merger-${self:provider.stage}
    handler: src/merger.handler
    package:
      patterns:
        - src/merger.py
    environment:
      OUTPUT_BUCKET: !Ref OutputBucket

stepFunctions:
  stateMachines:
    slsStep:
      name: ${self:custom.StateMachine}
      tracingConfig:
        enabled: true
      definition:
        Comment: "Serverless Step Function example for S3 file processing"
        StartAt: collector
        States:
          collector:
            Type: Task
            Resource: !GetAtt lambdaCollector.Arn
            Next: iterator
          iterator:
            Type: Map
            ItemsPath: "$.payload"
            ResultPath: "$.results"
            Iterator:
              StartAt: processor
              States:
                processor:
                  Type: Task
                  Resource: !GetAtt lambdaProcessor.Arn
                  End: true
            Next: merger
          merger:
            Type: Task
            Resource: !GetAtt lambdaMerger.Arn
            End: true

resources:
  Resources:
    # Common components

    OutputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-output-${self:provider.stage}
        AccessControl: Private

    # S3 Event -> SQS -> AWS Pipes -> Step Function flow components

    SQSInputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.SQSInputBucket}
        AccessControl: Private
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Queue: !GetAtt S3EventQ.Arn
      DependsOn:
        - SQSS3EventPolicy

    S3EventQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-s3event-${self:provider.stage}

    SQSS3EventPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: SQS:SendMessage
              Resource: !GetAtt S3EventQ.Arn
              Condition:
                ArnLike:
                  aws:SourceArn: arn:aws:s3:::${self:custom.SQSInputBucket} # use this rather than GetAtt to avoid circular reference
        Queues:
          - !Ref S3EventQ

    SQSStepFunctionPolicy:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - pipes.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: SQSReadMessage
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource: !GetAtt S3EventQ.Arn
          - PolicyName: StepFunctionStart
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:custom.StateMachine}

    SQSStepFunctionPipe:
      Type: AWS::Pipes::Pipe
      Properties:
        Name: SQS-to-StepFunction-Pipe
        DesiredState: RUNNING
        RoleArn: !GetAtt SQSStepFunctionPolicy.Arn
        Source: !GetAtt S3EventQ.Arn
        SourceParameters:
          SqsQueueParameters:
            BatchSize: 1
        Target: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:custom.StateMachine}
        TargetParameters:
          StepFunctionStateMachineParameters:
            InvocationType: FIRE_AND_FORGET

    # S3 Event -> EventBridge Rule -> Step Function flow components

    EventBridgeInputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-eventbridge-input-${self:provider.stage}
        AccessControl: Private
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true

    EventBridgeStepFunctionPolicy:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: StepFunctionStart
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:custom.StateMachine}

    S3InputBucketEventBridgeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ${self:service}-s3-input-bucket-rule-${self:provider.stage}
        State: ENABLED
        EventPattern:
          source:
            - aws.s3
          detail-type:
            - Object Created
          detail:
            bucket:
              name:
                - !Ref EventBridgeInputBucket
        Targets:
          - Arn: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:custom.StateMachine}
            RoleArn: !GetAtt EventBridgeStepFunctionPolicy.Arn
            Id: "StepFunction"
